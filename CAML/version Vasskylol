(* Karassev Marc *)

type 'a liste = vide | cons of  'a* 'a liste;;
let rec lignes = function canal ->
          try let une_ligne = input_line canal in
                cons(une_ligne, lignes canal)
          with End_of_file -> vide;;
let lire = function nom ->
       let canal = open_in nom in
          let resu = lignes canal in
               close_in canal; resu;;

let tete = function cons(x,_) -> x | _ -> failwith "impossible";;
let suite = function cons(_,y) -> y | _ -> failwith "impossible";;

let lire_car =function nom ->
 let canal=open_in nom in
  let rec lirea =function  () -> 
         try let a = input_char canal in 
            cons(a ,lirea ())  with
       End_of_file -> begin close_in canal;vide end
      in    lirea ();;

let is_sep = function ` `| `\n` -> true
                     | _ -> false;;

let rec saute_mot = function vide -> vide
        | cons(car,reste) as l -> if is_sep car then l
                  else saute_mot reste;;

let char2str = function car -> make_string 1 car;;

let rec  premier_mot = function vide -> ""
     | cons(car,reste) -> if is_sep car then ""
                else char2str car ^  premier_mot reste;;

let rec analyselex = function vide->vide
  |cons (car,reste) as l -> if is_sep car then
            analyselex reste
    else cons(premier_mot l , analyselex (saute_mot l));;

let tout= function nom -> analyselex(lire_car nom);;

let rec compter = function (l, cible) ->
if l = vide then 0
else if tete(l) = cible then 1 + compter(suite l,cible)
else compter(suite l,cible);;

let rec compter_liste = function l ->
if l = vide then vide
else cons((tete l,compter(l,tete l)), compter_liste(suite l));;

let rec maximum_bis = function (l,max) -> 
if l = vide then max
else if snd(tete l) > snd(max) then maximum_bis(suite l,tete l)
else maximum_bis(suite l,max);;

let rec maximum = function l -> maximum_bis(l,tete l);;

maximum(compter_liste(tout("libe.txt")));;
